Sunplus u'nSP Assembler - Ver. 1.14.12

                            	//========================================================================================
                            	// Progarm: Standard function definition
                            	// Writen by: Andy
                            	//
                            	// Lastest modified date: 
                            	// 		2000/06/23: first version
                            	//		2000/07/15: modified
                            	//		2000/07/24: modified					for sacmv25.lib
                            	//		2001/10/03: Add more public about queue for sacmv25f.lib
                            	// 		2001/11/05: Independent Queue for A2000/S480/MS01 Manual Mode - sacmv25h.lib
                            	//		2001/11/06: Fix volume parameter problem - sacmv25i.lib
                            	//
                            	// For: sacmV25n.lib
                            	//
                            	// Note: 
                            	//  1. Don't change this file if possible.
                            	//  2. Update hardware.inc with hardware.asm synchorously
                            	//	3. Provide Open code for sacmVxx.lib
                            	//
                            	//========================================================================================
                            	
                            	.PUBLIC	F_SP_RampUpDAC1
                            	.PUBLIC	F_SP_RampDnDAC1
                            	.PUBLIC	F_SP_RampUpDAC2
                            	.PUBLIC	F_SP_RampDnDAC2
                            	.PUBLIC	_SP_RampUpDAC1 
                            	.PUBLIC	_SP_RampDnDAC1 
                            	.PUBLIC	_SP_RampUpDAC2 
                            	.PUBLIC	_SP_RampDnDAC2 
                            	
                            	.PUBLIC	_SP_InitQueue
                            	.PUBLIC	_SP_InitQueue_A2000
                            	.PUBLIC	_SP_InitQueue_S480
                            	.PUBLIC	_SP_InitQueue_S240
                            	.PUBLIC	_SP_InitQueue_MS01
                            	.PUBLIC	_SP_InitQueue_DVR
                            	
                            	.PUBLIC	F_SP_InitQueue
                            	.PUBLIC	F_SP_InitQueue_A2000
                            	.PUBLIC	F_SP_InitQueue_S480
                            	.PUBLIC	F_SP_InitQueue_S240
                            	.PUBLIC	F_SP_InitQueue_MS01
                            	.PUBLIC	F_SP_InitQueue_DVR
                            	
                            	.PUBLIC	F_SP_ReadQueue
                            	.PUBLIC F_SP_ReadQueue_A2000
                            	.PUBLIC F_SP_ReadQueue_S480
                            	.PUBLIC F_SP_ReadQueue_S240
                            	.PUBLIC F_SP_ReadQueue_MS01
                            	.PUBLIC F_SP_ReadQueue_DVR
                            	
                            	.PUBLIC	F_SP_ReadQueue_NIC			// Read Queue with no index change
                            	.PUBLIC	F_SP_ReadQueue_NIC_A2000
                            	.PUBLIC	F_SP_ReadQueue_NIC_S480
                            	.PUBLIC	F_SP_ReadQueue_NIC_S240
                            	.PUBLIC	F_SP_ReadQueue_NIC_MS01
                            	.PUBLIC	F_SP_ReadQueue_NIC_DVR
                            	
                            	.PUBLIC	F_SP_WriteQueue
                            	.PUBLIC F_SP_WriteQueue_A2000
                            	.PUBLIC F_SP_WriteQueue_S480
                            	.PUBLIC F_SP_WriteQueue_S240
                            	.PUBLIC F_SP_WriteQueue_MS01
                            	.PUBLIC F_SP_WriteQueue_DVR
                            	
                            	.PUBLIC F_SP_TestQueue
                            	.PUBLIC F_SP_TestQueue_A2000
                            	.PUBLIC F_SP_TestQueue_S480
                            	.PUBLIC F_SP_TestQueue_S240
                            	.PUBLIC F_SP_TestQueue_MS01
                            	.PUBLIC F_SP_TestQueue_DVR
                            	
                            	.PUBLIC _SP_Export  
                            	.PUBLIC	_SP_Import 
                            	.PUBLIC _SP_Init_IOB 
                            	.PUBLIC _SP_Init_IOA 
                            	
                            	.PUBLIC	_SP_GetResource	
                            	.PUBLIC F_SP_GetResource
                            	
                            	.PUBLIC F_SP_SACM_A2000_Init_
                            	.PUBLIC F_SP_SACM_S480_Init_
                            	.PUBLIC F_SP_SACM_S240_Init_
                            	
                            	.PUBLIC F_SP_SACM_MS01_Init_
                            	.PUBLIC F_SP_PlayMode0_
                            	.PUBLIC F_SP_PlayMode1_    
                            	.PUBLIC F_SP_PlayMode2_  
                            	.PUBLIC F_SP_PlayMode3_   
                            	
                            	.PUBLIC F_SP_SACM_DVR_Init_
                            	.PUBLIC F_SP_SACM_DVR_Rec_Init_
                            	.PUBLIC F_SP_SACM_DVR_Play_Init_
                            	
                            	.PUBLIC	R_InterruptStatus 
                            	.PUBLIC	F_RampUpDAC1 
                            	.PUBLIC	F_RampDnDAC1 
                            	.PUBLIC	F_RampUpDAC2 
                            	.PUBLIC	F_RampDnDAC2 
                            	.PUBLIC	_STD_RampUpDAC1 
                            	.PUBLIC	_STD_RampDnDAC1 
                            	.PUBLIC	_STD_RampUpDAC2 
                            	.PUBLIC	_STD_RampDnDAC2 
                            	
                            	//////////////////////////////////////////////////////////////////
                            	// Definitions for I/O Port
                            	//////////////////////////////////////////////////////////////////
                            	.DEFINE	P_IOA_Data   		0x7000         // Write Data into data register and read from IOA pad
                            	.DEFINE P_IOA_Buffer        0x7001         // Write Data into buffer register and read from buffer register
                            	.DEFINE P_IOA_Dir           0x7002         // Direction vector for IOA
                            	.DEFINE P_IOA_Attrib        0x7003         // Attribute vector for IOA
                            	.DEFINE P_IOA_Latch         0x7004         // Latch PortA data for key change wake-up
                            	
                            	.DEFINE P_IOB_Data         	0x7005         // Write Data into the data register and read from IOB pad
                            	.DEFINE P_IOB_Buffer        0x7006         // Write Data into buffer register and read from buffer register
                            	.DEFINE P_IOB_Dir           0x7007         // Direction vector for IOB
                            	.DEFINE P_IOB_Attrib        0x7008         // Attribute vector for IOB
                            	
                            	.DEFINE P_FeedBack          0x7009         // Clock form external R,C
                            	.DEFINE P_TimerA_Data       0x700A         // Data port for TimerA 
                            	.DEFINE P_TimerA_Ctrl       0x700B         // Control Port for TimerA
                            	.DEFINE P_TimerB_Data       0x700C         // Data port for TimerB
                            	.DEFINE P_TimerB_Ctrl       0x700D         // Control Port for TimerB
                            	.DEFINE P_TimeBase_Setup    0x700E         // TimerBase Freq. Set
                            	.DEFINE P_TimeBase_Clear	0x700F 		   // Reset Timerbase counter
                            	.DEFINE P_INT_Ctrl          0x7010         // Control port for interrupt source
                            	.DEFINE P_INT_Clear         0x7011         // Clear interrupt source
                            	.DEFINE P_Watchdog_Clear    0x7012         // Watchdog Reset
                            	.DEFINE P_SystemClock       0x7013         // Change system clock frequency(include go to standby mode)
                            	
                            	//... PA6442 New version MC52A (For EC-03)....
                            	.DEFINE P_ADC 	        	0x7014         	// Data Port for AD
                            	.DEFINE P_ADC_Ctrl          0x7015         	// Control Port for AD control
                            	.DEFINE P_ADC_Status        0x7015         	// AD Port Status
                            	.DEFINE P_DAC2              0x7016         	// Data Port for DAC2
                            	.DEFINE P_PWM               0x7016         	// Data Port for PWM
                            	.DEFINE P_DAC1	        	0x7017         	// Data Port for DAC1
                            	.DEFINE P_DAC_Ctrl			0x702A 			// Control Port for two DAC and audio output mode
                            	//............................................
                            	
                            	.DEFINE P_IR_Ctrl			0x7018 			// Control Port for IR
                            	.DEFINE P_LVD_Ctrl          0x7019         	// Control Port for LVD
                            	.DEFINE P_SIO_Data			0x701A 			// Data port for serial IO
                            	.DEFINE P_SIO_Addr_Low		0x701B 			// Address Port low
                            	.DEFINE P_SIO_Addr_Mid		0x701C 			// Address Port middle
                            	.DEFINE P_SIO_Addr_High	 	0x701D 			// Address Port high
                            	.DEFINE P_SIO_Ctrl			0x701E 			// Control Port
                            	.DEFINE P_SIO_Start			0x701F 			// Start port for serial interface
                            	.DEFINE P_SIO_Stop			0x7020 			// Stop port for serial interface
                            	
                            	.DEFINE P_UART_Command1		 0x7021 		// Command1 Port for UART
                            	.DEFINE P_UART_Command2		 0x7022 		// Command2 Port for UART
                            	.DEFINE P_UART_Data			 0x7023  		// Data Port for UART
                            	.DEFINE	P_UART_BaudScalarLow 0x7024 		// Set Baud Rate scalar low
                            	.DEFINE	P_UART_BaudScalarHigh 0x7025 		// Set Baud Rate scalar high
                            	
                            	
                            	//... Definitions for P_INT_Ctrl ..............
                            	.DEFINE C_IRQ6_TMB2             0x0001         	// Timer B IRQ6
                            	.DEFINE C_IRQ6_TMB1             0x0002         	// Timer A IRQ6
                            	.DEFINE C_IRQ5_2Hz              0x0004         	// 2Hz IRQ5
                            	.DEFINE C_IRQ5_4Hz              0x0008         	// 4Hz IRQ5
                            	.DEFINE C_IRQ4_1KHz             0x0010         	// 1024Hz IRQ4
                            	.DEFINE C_IRQ4_2KHz             0x0020         	// 2048Hz IRQ4
                            	.DEFINE C_IRQ4_4KHz             0x0040         	// 4096Hz IRQ4
                            	.DEFINE C_IRQ3_KEY              0x0080         	// Key Change IRQ3
                            	.DEFINE C_IRQ3_EXT1             0x0100         	// Ext1 IRQ3
                            	.DEFINE C_IRQ3_EXT2             0x0200         	// Ext2 IRQ3
                            	.DEFINE C_IRQ2_TMB              0x0400         	// Timer B IRQ2
                            	.DEFINE C_FIQ_TMB               0x0800         	// Timer B FIQ
                            	.DEFINE C_IRQ1_TMA              0x1000         	// Timer A IRQ1
                            	.DEFINE C_FIQ_TMA               0x2000         	// Timer A FIQ
                            	.DEFINE C_IRQ0_PWM              0x4000         	// PWM IRQ0
                            	.DEFINE C_FIQ_PWM               0x8000         	// PWM FIQ
                            	
                            	// Definitions for P_TimerA/B_Ctrl ............                               
                            	.DEFINE	C_Fosc_2				0x0000 			// 
                            	.DEFINE	C_Fosc_256		    	0x0001 			//
                            	.DEFINE	C_32768Hz				0x0002 			//
                            	.DEFINE	C_8192Hz				0x0003 			//
                            	.DEFINE	C_4096Hz				0x0004 			//
                            	.DEFINE	C_A1					0x0005 			//
                            	.DEFINE C_A0					0x0006 			//
                            	.DEFINE C_Ext1					0x0007 			//
                            	
                            	.DEFINE	C_2048Hz				0x0000 			//
                            	.DEFINE	C_1024Hz				0x0008 			//
                            	.DEFINE	C_256Hz					0x0010 			//
                            	.DEFINE	C_TMB1Hz				0x0018 			//
                            	.DEFINE	C_4Hz					0x0020 			//
                            	.DEFINE	C_2Hz					0x0028 			//
                            	.DEFINE	C_B1					0x0030 			//
                            	.DEFINE	C_Ext2					0x0038 			//
                            	
                            	.DEFINE	C_Off					0x0000 			//
                            	.DEFINE C_D1					0x0040 			//
                            	.DEFINE C_D2					0x0080 			//
                            	.DEFINE C_D3					0x00C0 			//
                            	.DEFINE C_D4					0x0100 			//
                            	.DEFINE C_D5					0x0140 			//
                            	.DEFINE C_D6					0x0180 			//
                            	.DEFINE C_D7					0x01C0 			//
                            	.DEFINE C_D8					0x0200 			//
                            	.DEFINE C_D9					0x0240 			//
                            	.DEFINE C_D10					0x0280 			//
                            	.DEFINE C_D11					0x02C0 			//
                            	.DEFINE C_D12					0x0300 			//
                            	.DEFINE C_D13					0x0340 			//
                            	.DEFINE C_D14					0x0380 			//
                            	.DEFINE C_TA_Div_2				0x03C0 			// Timer A
                            	.DEFINE C_TB_Div_2				0x03C0 			// Timer B
                            	
                            	//... Definition for P_SystemClock ............
                            	.DEFINE C_Fosc					0x0000 			// b3..b0
                            	.DEFINE C_Fosc_Div_2			0x0001 			//
                            	.DEFINE C_Fosc_Div_4			0x0002 			//
                            	.DEFINE C_Fosc_Div_8			0x0003 			// (default)
                            	.DEFINE C_Fosc_Div_16			0x0004 			//
                            	.DEFINE C_Fosc_Div_32			0x0005 			//
                            	.DEFINE C_Fosc_Div_64			0x0006 			//
                            	.DEFINE C_Sleep					0x0007 		 	//
                            	
                            	.DEFINE	C_32K_Work				0x0000 			// b4
                            	.DEFINE C_32K_Off				0x0000 			// 
                            	.DEFINE C_StrongMode			0x0000 			// b5
                            	.DEFINE C_AutoMode				0x0000 			//
                            	
                            	//... Define for P_AD_Ctrl ....................
                            	.DEFINE	C_AD					0x0001 			//
                            	.DEFINE C_DA					0x0000 			//
                            	.DEFINE C_MIC					0x0000 			//
                            	.DEFINE C_LINE					0x0002 			//
                            	
                            	//... Define for P_DA_Ctrl ....................
                            	.DEFINE C_PushPull				0x0000 			// b0, (default) 
                            	.DEFINE C_DoubleEnd				0x0001 			// b0
                            	.DEFINE	C_DAC_Mode				0x0000 			// b1, (default)
                            	.DEFINE C_PWM_Mode				0x0002 			// b1
                            	
                            	.DEFINE	C_D1_Direct				0x0000 			// DAC1 latch
                            	.DEFINE C_D1_LatchA				0x0008 			// 
                            	.DEFINE C_D1_LatchB				0x0010 			//
                            	.DEFINE C_D1_LatchAB			0x0018 			//
                            	
                            	.DEFINE	C_D2_Direct				0x0000 			// DAC2 latch
                            	.DEFINE C_D2_LatchA				0x0020 			// 
                            	.DEFINE C_D2_LatchB				0x0040 			//
                            	.DEFINE C_D2_LatchAB			0x00C0 			//
                            	
                            	//... Define for P_LVD_Ctrl ...................
                            	.DEFINE C_LVD24V				0x0000 			// LVD = 2.4V 
                            	.DEFINE C_LVD28V				0x0001 			// LVD = 2.8V
                            	.DEFINE C_LVD32V				0x0002 			// LVD = 3.2V
                            	.DEFINE C_LVD36V				0x0003 			// LVD = 3.6V
                            	
                            	
                            	
                            	/////////////////////////////////////////////////////////////////
                            	// Note: This register map to the P_INT_Ctrl(0x7010)
                            	// 	User's interrupt setting have to combine with this register 
                            	//	while co-work with SACM library.
                            	//
                            	//  See. following function for example:
                            	//	F_SP_SACM_A2000_Init_:
                            	//	F_SP_SACM_S480_Init_:
                            	//	F_SP_SACM_S240_Init_:
                            	//	F_SP_SACM_MS01_Init_:
                            	//	F_SP_SACM_DVR_Init_: 
                            	//////////////////////////////////////////////////
00000000                    	.IRAM
00000000 00 00              	.VAR	R_InterruptStatus = 0 					// 
                            	
                            	
                            	//////////////////////////////////////////////////
                            	
                            	.define C_RampDelayTime 16
                            	
                            	.define C_QueueSize 100		
                            			
00000001 00 00              	.VAR 	R_Queue 
00000002 00 00 00 00        	.DW		C_QueueSize-1	DUP(0) 
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00      
00000065 00 00              	.VAR	R_ReadIndex 
00000066 00 00              	.VAR	R_WriteIndex 
                            	
00000000                    	.CODE
                            	
                            					
                            	
                            	///////////////////////////////////////////
                            	// Function: Initial Queue
                            	// Destory: R1,R2
                            	///////////////////////////////////////////	
                            	_SP_InitQueue:	.PROC
                            	_SP_InitQueue_A2000:
                            	_SP_InitQueue_S480:
                            	_SP_InitQueue_S240:
                            	_SP_InitQueue_MS01:
                            	_SP_InitQueue_DVR:
                            	
                            	F_SP_InitQueue_A2000:
                            	F_SP_InitQueue_S480:
                            	F_SP_InitQueue_S240:
                            	F_SP_InitQueue_MS01:
                            	F_SP_InitQueue_DVR:
                            	F_SP_InitQueue:
00000000 09 93 01 00        			R1 = R_Queue
00000002 40 94              			R2 = 0 
                            	L_ClearQueueLoop?:		
00000003 D1 D4              			[R1++] = R2
00000004 09 43 65 00        			cmp	R1, R_Queue+C_QueueSize
00000006 44 4E              			jne	L_ClearQueueLoop?
                            				
00000007 40 92              			R1 = 0
00000008 19 D3 65 00        			[R_ReadIndex] = R1
0000000A 19 D3 66 00        			[R_WriteIndex] = R1
                            					
0000000C 90 9A              			RETF
                            			.ENDP
                            			
                            	///////////////////////////////////////////
                            	// Function: Get a data form Queue
                            	// Output:  R1: Data
                            	//			R2: return value
                            	// Destory: R1,R2
                            	///////////////////////////////////////////	
                            	F_SP_ReadQueue_A2000:
                            	F_SP_ReadQueue_S480:
                            	F_SP_ReadQueue_S240:
                            	F_SP_ReadQueue_MS01:
                            	F_SP_ReadQueue_DVR:
                            	F_SP_ReadQueue:
0000000D 12 95 65 00        			R2 = [R_ReadIndex]
0000000F 12 45 66 00        			cmp R2,[R_WriteIndex]
00000011 0D 5E              			je	L_RQ_QueueEmpty
                            	
00000012 0A 05 01 00        			R2 += R_Queue				// get queue data address
00000014 C2 92              			R1 = [R2]
                            			
00000015 12 95 65 00        			R2 = [R_ReadIndex]
00000017 41 04              			R2 += 1
00000018 0A 45 64 00        			cmp	R2, C_QueueSize
0000001A 01 4E              			jne	L_RQ_NotQueueBottom
0000001B 40 94              			R2 = 0
                            	L_RQ_NotQueueBottom:	
0000001C 1A D5 65 00        			[R_ReadIndex] = R2		
                            			//r2 = 0x0000 						// get queue data
0000001E 90 9A              			retf 
                            	L_RQ_QueueEmpty:
                            			//r2 = 0x8000 						// queue empty
0000001F 90 9A              			retf 
                            	
                            	///////////////////////////////////////////
                            	// Function: Get a data from Queue but do 
                            	//			not change queue index
                            	// R1: output
                            	// Destory: R1,R2
                            	///////////////////////////////////////////
                            	F_SP_ReadQueue_NIC:
                            	F_SP_ReadQueue_NIC_A2000:
                            	F_SP_ReadQueue_NIC_S480:
                            	F_SP_ReadQueue_NIC_S240:
                            	F_SP_ReadQueue_NIC_MS01:
                            	F_SP_ReadQueue_NIC_DVR:
00000020 12 95 65 00        			R2 = [R_ReadIndex]
00000022 12 45 66 00        			cmp R2,[R_WriteIndex]
00000024 03 5E              			je	L_RQ_QueueEmpty?
                            	
00000025 0A 05 01 00        			R2 += R_Queue				// get queue data index
00000027 C2 92              			R1 = [R2]
                            	L_RQ_QueueEmpty?:
00000028 90 9A              			RETF
                            			
                            	///////////////////////////////////////////
                            	// Function: Put a data to Queue
                            	// R1: Input
                            	// Destory: R1,R2
                            	///////////////////////////////////////////	
                            	F_SP_WriteQueue_A2000:
                            	F_SP_WriteQueue_S480:
                            	F_SP_WriteQueue_S240:
                            	F_SP_WriteQueue_MS01:
                            	F_SP_WriteQueue_DVR:
                            	F_SP_WriteQueue:
00000029 12 95 66 00        			R2 = [R_WriteIndex] 			// put data to queue
0000002B 0A 05 01 00        			R2 += R_Queue
0000002D C2 D2              			[R2] = R1
                            	
0000002E 12 95 66 00        			R2 = [R_WriteIndex]
00000030 41 04              			R2 += 1
00000031 0A 45 64 00        			cmp	R2, C_QueueSize
00000033 01 4E              			jne	L_WQ_NotQueueBottom
00000034 40 94              			R2 = 0
                            	L_WQ_NotQueueBottom:
00000035 1A D5 66 00        			[R_WriteIndex] = R2
00000037 90 9A              			RETF
                            	
                            			
                            	///////////////////////////////////////////
                            	// Function: Test Queue Status
                            	// o/p: R1
                            	// Destory: R1
                            	///////////////////////////////////////////	
                            	F_SP_TestQueue_A2000:
                            	F_SP_TestQueue_S480:
                            	F_SP_TestQueue_S240:
                            	F_SP_TestQueue_MS01:
                            	F_SP_TestQueue_DVR:
                            	F_SP_TestQueue:
                            			//... Test Queue Empty ...
00000038 11 93 65 00        			R1 = [R_ReadIndex] 
0000003A 11 43 66 00        			cmp R1,[R_WriteIndex] 
0000003C 12 5E              			je	L_TQ_QueueEmpty 
                            	
                            			//... Test Queue Full ...
0000003D 11 93 65 00        			R1 = [R_ReadIndex] 				// For N Queue Full: 1.R=0 and W=N-1 2. R<>0 and W=R-1 
0000003F 05 4E              			jnz	L_TQ_JudgeCond2 
00000040 11 93 66 00        			R1 = [R_WriteIndex] 
00000042 09 43 63 00        			cmp	R1, C_QueueSize-1 			// Cond1
00000044 08 5E              			je	L_TQ_QueueFull 			
                            	L_TQ_JudgeCond2:		
00000045 11 93 65 00        			R1 = [R_ReadIndex] 
00000047 41 22              			R1 -=1 
00000048 11 43 66 00        			cmp R1,[R_WriteIndex] 
0000004A 02 5E              			je	L_TQ_QueueFull 	
                            	
0000004B 40 92              			r1 = 0 							// not Full, not empty
0000004C 90 9A              			retf 
                            	L_TQ_QueueFull:
0000004D 41 92              			r1 = 1 							// full
0000004E 90 9A              			retf 
                            	L_TQ_QueueEmpty:
0000004F 42 92              			r1 = 2 							// empty
00000050 90 9A              			retf 
                            	
                            	
                            	
                            	
                            	
                            	///////////////////////////////////////////////////////////////////////////////
                            	// Function: The partial code of hardware setting of SACM_A2000_Initial() 
                            	//			or F_SACM_A2000_Initial:
                            	// Note: The following functions are the partial code of original
                            	//			initial subroutine. (H/W setting part) 
                            	//
                            	//	Ex: F_SACM_A2000_Initial:
                            	//			...
                            	//			call F_SP_SACM_A2000_Init_	: S480/S240/MS01 is same
                            	//			...
                            	//			retf
                            	////////////////////////////////////////////////////////////////////////////////
                            	F_SP_SACM_A2000_Init_:	
00000051 40 92              			R1=0x0000;                      // 24MHz, Fcpu=Fosc
00000052 19 D3 13 70        	        [P_SystemClock]=R1           	//  Frequency 20MHz
00000054 70 92              	        R1 = 0x0030                     // TimerA CKA=Fosc/2 CKB=1 Tout:off
00000055 19 D3 0B 70        	        [P_TimerA_Ctrl] = R1			// Initial Timer A
00000057 09 93 00 FD        	        R1 = 0xfd00                  	// 16K
00000059 19 D3 0A 70        	        [P_TimerA_Data] = R1 
0000005B 09 93 A8 00        	        R1 = 0x00A8                     // Set the DAC Ctrl
0000005D 19 D3 2A 70        	        [P_DAC_Ctrl] = R1
0000005F 09 93 FF FF        	        R1 = 0xffff
                            	        
00000061 19 D3 11 70        	        [P_INT_Clear] = R1          	// Clear interrupt occuiped events
00000063 40 92              	        R1 =0x0000						// 
                            	        
                            	        
00000064 11 93 00 00        	        R1 = [R_InterruptStatus]		//
00000066 09 A3 00 20        	        R1 |= C_FIQ_TMA					// Enable Timer A FIQ
                            	        //R1 |= C_IRQ4_1KHz
00000068 19 D3 00 00        	        [R_InterruptStatus] = R1		//
0000006A 19 D3 10 70        	        [P_INT_Ctrl] = R1				//
                            	
0000006C 90 9A              			RETF
                            	
                            	
                            	//////////////////////////////////////////////////////////////////
                            	// Function: The partial code of hardware setting of SACM_S480_Initial() 
                            	//			or F_SACM_S480_Initial:
                            	//////////////////////////////////////////////////////////////////
                            	F_SP_SACM_S480_Init_:
0000006D 40 92              	        R1 = 0x0000						// 24MHz Fosc
0000006E 19 D3 13 70        	        [P_SystemClock]=R1          	// Initial System Clock
00000070 70 92              	        R1=0x0030                       // TimerA CKA=Fosc/2 CKB=1 Tout:off
00000071 19 D3 0B 70        	        [P_TimerA_Ctrl]=R1				// Initial Timer A
                            	        //R1 = 0xfd00                  	// 16K
00000073 09 93 ED FC        	        R1 = 0xfced						// 15.625K
00000075 19 D3 0A 70        	        [P_TimerA_Data]=R1
00000077 09 93 A8 00        	        R1 = 0x00A8						// 
00000079 19 D3 2A 70        	        [P_DAC_Ctrl] = R1				//
                            	        
0000007B 09 93 FF FF        	        R1 = 0xffff
0000007D 19 D3 11 70        	        [P_INT_Clear] = R1          	// Clear interrupt occuiped events
0000007F 11 93 00 00        	        R1 = [R_InterruptStatus]		//
00000081 09 A3 00 20        	        R1 |= C_FIQ_TMA					// Enable Timer A FIQ
                            	        //R1 |= C_IRQ4_1KHz				// Enable 1KHz IRQ4 for S480 decoder
00000083 19 D3 00 00        	        [R_InterruptStatus] = R1		//
00000085 19 D3 10 70        	        [P_INT_Ctrl] = R1				//
                            	        
00000087 90 9A              	        RETF
                            	
                            	//////////////////////////////////////////////////////////////////
                            	// Function: The partial code of hardware setting of SACM_S240_Initial() 
                            	//			or F_SACM_S240_Initial:
                            	//////////////////////////////////////////////////////////////////
                            	F_SP_SACM_S240_Init_:	
00000088 60 92              			R1=0x0020;	
00000089 19 D3 13 70        			[P_SystemClock]=R1
0000008B 09 93 A8 00        			R1 = 0x00A8;					// 
0000008D 19 D3 2A 70        			[P_DAC_Ctrl]= R1
0000008F 70 92              			R1 = 0x0030;               	// TimerA CKA=Fosc/2 CKB=1 Tout:off
00000090 19 D3 0B 70        	        [P_TimerA_Ctrl] = R1;
00000092 09 93 00 FE        			R1 = 0xfe00;                    // 24K
00000094 19 D3 0A 70        	    	[P_TimerA_Data] = R1;		
00000096 09 93 FF FF        	        R1 = 0xffff
00000098 19 D3 11 70        	        [P_INT_Clear] = R1          	// Clear interrupt occuiped events
0000009A 11 93 00 00        	        R1 = [R_InterruptStatus]		//
0000009C 09 A3 00 20        	        R1 |= C_FIQ_TMA					// Enable Timer A FIQ
0000009E 19 D3 00 00        	        [R_InterruptStatus] = R1		//
000000A0 19 D3 10 70        	        [P_INT_Ctrl] = R1				//
000000A2 90 9A              	        RETF
                            	
                            	//////////////////////////////////////////////////////////////////
                            	// Function: The partial code of hardware setting of SACM_MS01_Initial() 
                            	//			or F_SACM_MS01_Initial:
                            	//
                            	//	Ex: F_SACM_MS01_Initial:
                            	//			...
                            	//			call F_SP_SACM_MS01_Init_
                            	//			call F_SP_Play_Mode0/1/2/3	->0,1,2,3 depending on the para1
                            	//			...
                            	//			retf
                            	//////////////////////////////////////////////////////////////////
                            	F_SP_SACM_MS01_Init_:	
000000A3 40 92              			R1 = 0x0000;                    // 24MHz, Fcpu=Fosc
000000A4 19 D3 13 70        	        [P_SystemClock] = R1;        	// Initial System Clock
000000A6 70 92              	        R1 = 0x0030;                    // TimerA CKA=Fosc/2 CKB=1 Tout:off
000000A7 19 D3 0B 70        	        [P_TimerA_Ctrl] = R1			// Initial Timer A
                            	        
                            	        //R1 = 0x0003						// 8K
000000A9 40 92              	        R1 = 0x0000						// Fosc/2
000000AA 19 D3 0D 70        	        [P_TimerB_Ctrl] = R1;			// Initial Timer B -> 8192	
                            	        
                            	        //R1 = 0xFFFF        
000000AC 09 93 00 FA        	        R1 = 0xFA00					// Any time for ADPCM channel 0,1
000000AE 19 D3 0C 70        	        [P_TimerB_Data] = R1			// 8K sample rate
                            	        
000000B0 09 93 FF FF        			R1 = 0xffff
000000B2 19 D3 11 70        	        [P_INT_Clear] = R1          	// Clear interrupt occuiped events
000000B4 90 9A              	        RETF
                            	
                            	//........................................
                            	F_SP_PlayMode0_:						// with F_SP_SACM_MS01_Initial
000000B5 46 92              			R1 = 0x0006
000000B6 19 D3 2A 70        	        [P_DAC_Ctrl] = R1
000000B8 09 93 00 FE        	        R1 = 0xFE00
000000BA 19 D3 0A 70        	        [P_TimerA_Data] = R1 			//
000000BC 11 93 00 00        	        R1 = [R_InterruptStatus] 		//
000000BE 09 A3 10 84        	        R1 |= C_FIQ_PWM+C_IRQ2_TMB+C_IRQ4_1KHz
000000C0 19 D3 00 00        	        [R_InterruptStatus] = R1 		//
000000C2 19 D3 10 70        	        [P_INT_Ctrl] = R1				//
000000C4 90 9A              	        RETF
                            	
                            	F_SP_PlayMode1_:						// with F_SP_SACM_MS01_Initial
000000C5 09 93 A8 00        			R1 = 0x00A8
000000C7 19 D3 2A 70        	        [P_DAC_Ctrl] = R1
000000C9 09 93 00 FE        	        R1 = 0xFE00
000000CB 19 D3 0A 70        	        [P_TimerA_Data] = R1 			//
000000CD 11 93 00 00        	        R1 = [R_InterruptStatus] 		//
000000CF 09 A3 10 24        	        R1 |= C_FIQ_TMA+C_IRQ2_TMB+C_IRQ4_1KHz
000000D1 19 D3 00 00        	        [R_InterruptStatus] = R1 		//
000000D3 19 D3 10 70        	        [P_INT_Ctrl] = R1				//
000000D5 90 9A              	        RETF
                            	
                            	
                            	F_SP_PlayMode2_:	 						// with F_SP_SACM_MS01_Initial
000000D6 09 93 A8 00        			R1 = 0x00A8
000000D8 19 D3 2A 70        	        [P_DAC_Ctrl] = R1
000000DA 09 93 9A FD        	        R1 = 0xFD9A
000000DC 19 D3 0A 70        	        [P_TimerA_Data] = R1 				//
000000DE 11 93 00 00        	        R1 = [R_InterruptStatus] 			//
000000E0 09 A3 10 24        	        R1 |= C_FIQ_TMA+C_IRQ2_TMB+C_IRQ4_1KHz
000000E2 19 D3 00 00        	        [R_InterruptStatus] = R1 			//
000000E4 19 D3 10 70        	        [P_INT_Ctrl] = R1					//
000000E6 90 9A              	        RETF
                            	
                            	      
                            	F_SP_PlayMode3_:								// with F_SP_SACM_MS01_Initial
000000E7 09 93 A8 00        			R1 = 0x00A8
000000E9 19 D3 2A 70        	        [P_DAC_Ctrl] = R1
000000EB 09 93 00 FD        	        R1 = 0xFD00
000000ED 19 D3 0A 70        	        [P_TimerA_Data] = R1 					//
000000EF 11 93 00 00        	        R1 = [R_InterruptStatus] 				//
000000F1 09 A3 10 24        	        R1 |= C_FIQ_TMA+C_IRQ2_TMB+C_IRQ4_1KHz
000000F3 19 D3 00 00        		    [R_InterruptStatus] = R1 				//
000000F5 19 D3 10 70        	        [P_INT_Ctrl] = R1						//
000000F7 90 9A              	        RETF
                            	        
                            	///////////////////////////////////////////////////////////////////////////////
                            	// Function: The partial code of hardware setting of SACM_MS01_Initial() 
                            	//			or F_SACM_MS01_Initial:
                            	//
                            	//	Ex: F_SACM_DVR_Initial:
                            	//			...
                            	//			call F_SP_SACM_DVR_Init_
                            	//			call F_SP_Play_Mode0/1/2/3	->0,1,2,3 depending on the para1
                            	//			...
                            	//			retf
                            	//	Ex1:
                            	//		F_SACM_DVR_Record: (or F_SACM_DVR_InitEncoder)
                            	//			...
                            	//			call F_SP_SACM_DVR_Rec_Init
                            	//			...
                            	//			retf
                            	//	Ex2:
                            	//		F_SACM_DVR_Play: (or F_SACM_DVR_InitDecoder)
                            	//			...
                            	//			call F_SP_SACM_DVR_Play_Init_
                            	//			...
                            	//			retf
                            	///////////////////////////////////////////////////////////////////////////////
                            	F_SP_SACM_DVR_Init_:
000000F8 40 92              	        r1 = 0x0000;                    // 24MHz, Fcpu=Fosc
000000F9 19 D3 13 70        	        [P_SystemClock] = r1;           //  Frequency 20MHz
000000FB 70 92              	        r1 = 0x0030;                    // TimerA CKA=Fosc/2 CKB=1 Tout:off
000000FC 19 D3 0B 70        	        [P_TimerA_Ctrl] = r1;
000000FE 09 93 00 FA        	        r1 = 0xfa00;                    // 8K @ 24.576MHz
                            	        //r1 = 0xfb1d;                  // 8K @ 20MHz
00000100 19 D3 0A 70        	        [P_TimerA_Data] = r1;
00000102 75 92              	        r1 = 0x0035;                    // ADINI should be open (107)
00000103 19 D3 15 70        	        [P_ADC_Ctrl] = r1;
00000105 09 93 A8 00        	        r1 = 0x00A8;                    // Set the DA Ctrl
00000107 19 D3 2A 70        	        [P_DAC_Ctrl] = r1;
                            	        
00000109 09 93 FF FF        	        r1 = 0xffff;
0000010B 19 D3 11 70        	        [P_INT_Clear] = r1;          	// Clear interrupt occuiped events
                            	        
0000010D 11 93 00 00        	        R1 = [R_InterruptStatus]		//
0000010F 09 A3 00 20        	        R1 |= C_FIQ_TMA					// Enable Timer A FIQ
00000111 19 D3 00 00        	        [R_InterruptStatus] = R1		//
00000113 19 D3 10 70        	        [P_INT_Ctrl] = R1				//
                            	        
00000115 90 9A              	        RETF
                            	
                            	
                            	
                            	
                            	
                            	F_SP_SACM_DVR_Rec_Init_:					// call by SACM_DVR_Record / SACM_DVR_InitEncoder
00000116 75 92              			r1 = 0x0035;  					//mic input
                            	        //r1 = 0x0037					//line_in input
00000117 19 D3 15 70        	        [P_ADC_Ctrl] = r1;       		//enable ADC
                            	        
00000119 09 93 00 FE        	        R1=0xfe00;                     	//24K @ 24.576MHz
0000011B 19 D3 0A 70        	        [P_TimerA_Data] = r1 
0000011D 90 9A              			RETF
                            	
                            	F_SP_SACM_DVR_Play_Init_:
0000011E 40 92              		    r1 = 0x0000						// call by SACM_DVR_Stop / SACM_DVR_Play
0000011F 19 D3 15 70        	        [P_ADC_Ctrl] = r1;       		// Disable ADC
                            	        
00000121 09 93 00 FD        	        r1 = 0xfd00;                	// 16K @ 24.576MHz
00000123 19 D3 0A 70        	        [P_TimerA_Data] = r1;
00000125 90 9A              	        RETF
                            	
                            	
                            	
                            	
                            	/////////////////////////////////////////////////////////////////////////////// 
                            	// Function: Extra Functions provided by Sunplus
                            	//	Type:	
                            	//		1. DAC Ramp up/down
                            	//		2. IO config/import/export
                            	//		3. Get resource data
                            	//
                            	//
                            	///////////////////////////////////////////////////////////////////////////////
                            	
                            	////////////////////////////////////////////////////////
                            	// Function: Ramp Up/Down to avoid speaker "pow" noise
                            	// Destory: R1,R2
                            	////////////////////////////////////////////////////////
                            	_SP_RampUpDAC1:	.PROC
                            	F_SP_RampUpDAC1:
00000126 90 D4              			push r1,r2 to [sp] 
00000127 11 93 17 70        	        r1=[P_DAC1] 
00000129 09 B3 C0 FF        	        r1 &= ~0x003f 
0000012B 09 43 00 80        	        cmp     r1,0x8000
0000012D 0E 0E              	        jb     	L_RU_NormalUp
0000012E 19 5E              	        je      L_RU_End
                            	                
                            	L_RU_DownLoop:
0000012F 40 F0 92 01        	        call    F_Delay         
00000131 41 94              	        r2 = 0x0001 
00000132 1A D5 12 70        	        [P_Watchdog_Clear] = r2 
00000134 09 23 40 00        	        r1 -= 0x40 
00000136 19 D3 17 70        	        [P_DAC1] = r1 
00000138 09 43 00 80        	        cmp     r1,0x8000 
0000013A 4C 4E              	        jne     L_RU_DownLoop   
                            	L_RD_DownEnd:
0000013B 0C EE              	        jmp     L_RU_End 
                            	
                            	L_RU_NormalUp:
                            	L_RU_Loop:
0000013C 40 F0 92 01        	        call    F_Delay 
0000013E 41 94              	        r2 = 0x0001 
0000013F 1A D5 12 70        	        [P_Watchdog_Clear] = r2 
00000141 09 03 40 00        	        r1 += 0x40 
00000143 19 D3 17 70        	        [P_DAC1] = r1 
00000145 09 43 00 80        	        cmp     r1, 0x8000 
00000147 4C 4E              	        jne     L_RU_Loop 
                            	L_RU_End:
00000148 90 90              			pop     r1,r2 from [sp] 
00000149 90 9A              	  		retf 
                            	    	.ENDP
                            	    
                            	//............................................................
                            	_SP_RampDnDAC1:	.PROC
                            	F_SP_RampDnDAC1:
0000014A 90 D4              			push r1,r2 to [sp] 
                            	  		//int off 
0000014B 11 93 17 70        	    	r1 = [P_DAC1] 
0000014D 09 B3 C0 FF        	     	r1 &= ~0x003F 
0000014F 0A 5E              	      	jz      L_RD_End 
                            	L_RD_Loop:                
00000150 40 F0 92 01        	        call    F_Delay         
00000152 41 94              	        r2 = 0x0001 
00000153 1A D5 12 70        	        [P_Watchdog_Clear] = r2 
00000155 09 23 40 00        	        r1 -= 0x40 
00000157 19 D3 17 70        	        [P_DAC1] = r1   
00000159 4A 4E              	        jnz     L_RD_Loop 
                            	L_RD_End:       
                            			//int	fiq,irq
0000015A 90 90              	        pop     r1,r2 from [sp] 
0000015B 90 9A              	        retf 
                            			.ENDP
                            	
                            	//..............................................................
                            	_SP_RampUpDAC2:	.PROC
                            	F_SP_RampUpDAC2:
0000015C 90 D4              			push r1,r2 to [sp] 
0000015D 11 93 16 70        	  		r1=[P_DAC2] 
0000015F 09 B3 C0 FF        	    	r1 &= ~0x003f 
00000161 09 43 00 80        	     	cmp     r1,0x8000
00000163 0E 0E              	      	jb     	L_RU_NormalUp_   
00000164 5D 5E              	       	je      L_RU_End 
                            	                
                            	L_RU_DownLoop_:
00000165 40 F0 92 01        	        call    F_Delay         
00000167 41 94              	        r2 = 0x0001 
00000168 1A D5 12 70        	        [P_Watchdog_Clear] = r2 
0000016A 09 23 40 00        	        r1 -= 0x40 
0000016C 19 D3 16 70        	        [P_DAC2] = r1 
0000016E 09 43 00 80        	        cmp     r1,0x8000 
00000170 4C 4E              	        jne     L_RU_DownLoop_   
                            	L_RD_DownEnd_:
00000171 0C EE              	        jmp     L_RU_End_ 
                            	
                            	L_RU_NormalUp_:
                            	L_RU_Loop_:
00000172 40 F0 92 01        			call    F_Delay 
00000174 41 94              	  		r2 = 0x0001 
00000175 1A D5 12 70        	    	[P_Watchdog_Clear] = r2 
00000177 09 03 40 00        	        r1 += 0x40 
00000179 19 D3 16 70        	        [P_DAC2] = r1 
0000017B 09 43 00 80        	        cmp     r1, 0x8000 
0000017D 4C 4E              	        jne     L_RU_Loop_ 
                            	L_RU_End_:
0000017E 90 90              	   		pop     r1,r2 from [sp] 
0000017F 90 9A              	     	retf 
                            	      	.ENDP
                            	//.............................................................
                            	_SP_RampDnDAC2:	.PROC
                            	F_SP_RampDnDAC2:
                            			//int off 
00000180 90 D4              			push r1,r2 to [sp] 
                            	                
00000181 11 93 16 70        	        r1 = [P_DAC2] 
00000183 09 B3 C0 FF        	        r1 &= ~0x003F 
00000185 0A 5E              	        jz      L_RD_End_ 
                            	L_RD_Loop_:                
00000186 40 F0 92 01        	        call    F_Delay         
00000188 41 94              	        r2 = 0x0001 
00000189 1A D5 12 70        	        [P_Watchdog_Clear] = r2 
0000018B 09 23 40 00        	        r1 -= 0x40 
0000018D 19 D3 16 70        	        [P_DAC2] = r1   
0000018F 4A 4E              	        jnz     L_RD_Loop_ 
                            	L_RD_End_:       
00000190 90 90              	        pop     r1,r2 from [sp] 
00000191 90 9A              	        retf 
                            			.ENDP
                            	
                            	//..................................................................				
                            	F_Delay:
00000192 88 D2              	        push r1 to [sp] 
00000193 50 92              	        r1 = C_RampDelayTime			// Ramp Up/Dn delay per step
                            	L_D_Loop:
00000194 41 22              	        r1 -= 1 
00000195 42 4E              	        jnz     L_D_Loop  
00000196 88 90              	        pop     r1 from [sp] 
00000197 90 9A              	        RETF	 
                            	
                            	
                            	
                            	////////////////////////////////////////////////////////////////
                            	// Function: I/O Port A configuration
                            	// 	void SP_Inti_IOA(int Dir, int Data, int Attrib)
                            	////////////////////////////////////////////////////////////////
                            	_SP_Init_IOA: .PROC
00000198 88 DA              			PUSH BP TO [SP] 
00000199 08 0B 01 00        	        BP = SP + 1 
0000019B 88 D2              			PUSH R1 TO [SP] 
0000019C 03 92              			R1 = [BP+3] 						// Port direction
0000019D 19 D3 02 70        			[P_IOA_Dir] = R1 
0000019F 04 92              			R1 = [BP+4] 
000001A0 19 D3 00 70        			[P_IOA_Data] = R1 
000001A2 05 92              			R1 = [BP+5] 
000001A3 19 D3 03 70        			[P_IOA_Attrib] = R1 
                            			
000001A5 88 90              			POP R1 FROM [SP] 
000001A6 88 98              	        POP BP FROM [SP] 
000001A7 90 9A              	        RETF 
                            			.ENDP
                            	
                            	////////////////////////////////////////////////////////////////// 
                            	// Function: I/O Port B configuration
                            	//  void SP_Inti_IOB(int Dir, int Data, int Attrib)
                            	//////////////////////////////////////////////////////////////////    
                            	_SP_Init_IOB: .PROC
000001A8 88 DA              			PUSH BP TO [SP] 
000001A9 08 0B 01 00        	        BP = SP + 1 
000001AB 88 D2              			PUSH R1 TO [SP] 
000001AC 03 92              			R1 = [BP+3] 						// Port direction
000001AD 19 D3 07 70        			[P_IOB_Dir] = R1 
000001AF 04 92              			R1 = [BP+4] 
000001B0 19 D3 05 70        			[P_IOB_Data] = R1 
000001B2 05 92              			R1 = [BP+5] 
000001B3 19 D3 08 70        			[P_IOB_Attrib] = R1 
                            			
000001B5 88 90              			POP R1 FROM [SP] 
000001B6 88 98              	        POP BP FROM [SP] 
000001B7 90 9A              	        RETF 
                            			.ENDP
                            	
                            	////////////////////////////////////////////////////////////////// 
                            	// Function: Get data from port
                            	// 	int SP_Import(unsigned int Port)
                            	//////////////////////////////////////////////////////////////////  
                            	_SP_Import: .PROC
000001B8 88 DA              	        PUSH BP TO [SP] 
000001B9 08 0B 01 00        	        BP = SP + 1 
                            	        
000001BB 03 92              			R1 = [BP+3]  						// Port Number
000001BC C1 92              			R1 = [R1]  
                            					
000001BD 88 98              	        POP BP FROM [SP] 
000001BE 90 9A              	        RETF 
                            			.ENDP
                            	
                            	_SP_Export: .PROC
000001BF 88 DA              	        PUSH BP,BP TO [SP] 
000001C0 08 0B 01 00        	        BP = SP + 1 
000001C2 90 D4              			PUSH R1,R2 TO [SP] 
000001C3 03 92              			R1 = [BP+3]  						// Port Number
000001C4 04 94              			R2 = [BP+4]  						// Value
000001C5 C1 D4              			[R1] = R2  
000001C6 90 90              			POP R1,R2 FROM [SP] 
000001C7 88 98              	        POP BP,BP FROM [SP] 
000001C8 90 9A              	        RETF         
                            	 		.ENDP
                            	
                            	
                            	////////////////////////////////////////////////////////////////// 
                            	// Function: Get data from resource(ROM area)
                            	// 	int SP_GetResource(int Addr, int Page)
                            	//////////////////////////////////////////////////////////////////  
                            	_SP_GetResource:	.PROC
000001C9 88 DA              			push bp to [sp] 
000001CA 08 0B 01 00        			bp = sp + 1 
                            			
000001CC 03 92              			r1 = [bp+3] 					// Address
000001CD 04 94              			r2 = [bp+4] 					// Page
                            			
000001CE 5A 95              			r2 = r2 lsl 4 					// Prepare Page for SR
000001CF 5A 95              			r2 = r2 lsl 4 
000001D0 4A 95              			r2 = r2 lsl 2 
                            			
000001D1 7F BC              			sr &= 0x03f 					// Change Page
000001D2 06 A5              	        r2 |=sr 						//
000001D3 02 9D              	        sr = r2 						//
                            	  
000001D4 E1 92              	  		r1 = D:[r1] 					// Get data
                            	       
000001D5 88 98              			pop	 bp from [sp] 
000001D6 90 9A              			retf 
                            			.ENDP 
                            	//........................................
                            	F_SP_GetResource:
000001D7 5A 95              			r2 = r2 lsl 4 					// Prepare Page for SR
000001D8 5A 95              			r2 = r2 lsl 4 
000001D9 4A 95              			r2 = r2 lsl 2 
                            			
000001DA 7F BC              			sr &= 0x03f 					// Change Page
000001DB 06 A5              	        r2 |=sr 						//
000001DC 02 9D              	        sr = r2 						//
                            	  
000001DD E1 92              	  		r1 = D:[r1] 					// Get data
000001DE 90 9A              		  	retf
                            	
                            	//////////////////////////////////////////////////////////////////
                            	// Functions: Reserve old defintion
                            	// Note: 	1. Some user who use old library may use the old name
                            	//			2. Have to be put at the end of this file
                            	//////////////////////////////////////////////////////////////////
                            	.DEFINE F_RampUpDAC1 F_SP_RampUpDAC1
                            	.DEFINE F_RampDnDAC1 F_SP_RampDnDAC1
                            	.DEFINE F_RampUpDAC2 F_SP_RampUpDAC2
                            	.DEFINE F_RampDnDAC2 F_SP_RampDnDAC2
                            	.DEFINE _STD_RampUpDAC1 _SP_RampUpDAC1
                            	.DEFINE _STD_RampDnDAC1 _SP_RampDnDAC1
                            	.DEFINE _STD_RampUpDAC2 _SP_RampUpDAC2
                            	.DEFINE _STD_RampDnDAC2 _SP_RampDnDAC2
                            	
                            	
                            	///////////////////////////////////////////////////////////////////
                            	                
                            	//========================================================================================        
                            	// End of hardware.asm
                            	//========================================================================================
                            	
                            	
                            	
                            	        
                            	        
                            	        
0 error(s), 0 warning(s).
