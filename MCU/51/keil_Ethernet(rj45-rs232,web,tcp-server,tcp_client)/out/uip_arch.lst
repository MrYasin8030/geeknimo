C51 COMPILER V9.01   UIP_ARCH                                                              08/23/2013 20:12:41 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE UIP_ARCH
OBJECT MODULE PLACED IN .\out\uip_arch.obj
COMPILER INVOKED BY: D:\Program Files\keil\C51\BIN\C51.EXE uip\uip_arch.c BROWSE INCDIR(.\app;.\bsp;.\uip) DEBUG OBJECTE
                    -XTEND PRINT(.\out\uip_arch.lst) OBJECT(.\out\uip_arch.obj)

line level    source

   1          /*
   2           * Copyright (c) 2001, Adam Dunkels.
   3           * All rights reserved. 
   4           *
   5           * Redistribution and use in source and binary forms, with or without 
   6           * modification, are permitted provided that the following conditions 
   7           * are met: 
   8           * 1. Redistributions of source code must retain the above copyright 
   9           *    notice, this list of conditions and the following disclaimer. 
  10           * 2. Redistributions in binary form must reproduce the above copyright 
  11           *    notice, this list of conditions and the following disclaimer in the 
  12           *    documentation and/or other materials provided with the distribution. 
  13           * 3. The name of the author may not be used to endorse or promote
  14           *    products derived from this software without specific prior
  15           *    written permission.  
  16           *
  17           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
  18           * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  19           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20           * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
  21           * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  22           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  23           * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  24           * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  25           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  26           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  27           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  28           *
  29           * This file is part of the uIP TCP/IP stack.
  30           *
  31           * $Id: uip_arch.c,v 1.2.2.1 2003/10/04 22:54:17 adam Exp $
  32           *
  33           */
  34          
  35          /*       ษออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป
  36                   บ    TITLE:  Keil C51 v7.00 port of Adam Dunkels' uIP v0.9 บ
  37                   บ REVISION:  VER 0.0                                       บ
  38                   บ REV.DATE:  14-01-05                                      บ
  39                   บ  ARCHIVE:                                                บ
  40                   บ   AUTHOR:  Murray R. Van Luyn, 2005.                     บ
  41                   ศออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ        */
  42          
  43          #include "uip.h"
  44          #include "uip_arch.h"
  45          
  46          #define BUF ((uip_tcpip_hdr *)&uip_buf[UIP_LLH_LEN])
  47          #define IP_PROTO_TCP    6
  48          
  49          /*-----------------------------------------------------------------------------------*/
  50          void
  51          uip_add32(u8_t *op32, u16_t op16)
  52          {
  53   1        
  54   1        uip_acc32[3] = op32[3] + (op16 & 0xff);
C51 COMPILER V9.01   UIP_ARCH                                                              08/23/2013 20:12:41 PAGE 2   

  55   1        uip_acc32[2] = op32[2] + (op16 >> 8);
  56   1        uip_acc32[1] = op32[1];
  57   1        uip_acc32[0] = op32[0];
  58   1        
  59   1        if(uip_acc32[2] < (op16 >> 8)) {
  60   2          ++uip_acc32[1];    
  61   2          if(uip_acc32[1] == 0) {
  62   3            ++uip_acc32[0];
  63   3          }
  64   2        }
  65   1        
  66   1        
  67   1        if(uip_acc32[3] < (op16 & 0xff)) {
  68   2          ++uip_acc32[2];  
  69   2          if(uip_acc32[2] == 0) {
  70   3            ++uip_acc32[1];    
  71   3            if(uip_acc32[1] == 0) {
  72   4              ++uip_acc32[0];
  73   4            }
  74   3          }
  75   2        }
  76   1      }
  77          /*-----------------------------------------------------------------------------------*/
  78          u16_t
  79          uip_chksum(u16_t *sdata, u16_t len)
  80          {
  81   1        u16_t acc;
  82   1        
  83   1        for(acc = 0; len > 1; len -= 2) {
  84   2          acc += *sdata;
  85   2          if(acc < *sdata) {
  86   3            /* Overflow, so we add the carry to acc (i.e., increase by
  87   3               one). */
  88   3            ++acc;
  89   3          }
  90   2          ++sdata;
  91   2        }
  92   1      
  93   1        /* add up any odd byte */
  94   1        if(len == 1) {
  95   2          acc += htons(((u16_t)(*(u8_t *)sdata)) << 8);
  96   2          if(acc < htons(((u16_t)(*(u8_t *)sdata)) << 8)) {
  97   3            ++acc;
  98   3          }
  99   2        }
 100   1      
 101   1        return acc;
 102   1      }
 103          /*-----------------------------------------------------------------------------------*/
 104          u16_t
 105          uip_ipchksum(void)
 106          {
 107   1        return uip_chksum((u16_t *)&uip_buf[UIP_LLH_LEN], 20);
 108   1      }
 109          /*-----------------------------------------------------------------------------------*/
 110          u16_t
 111          uip_tcpchksum(void)
 112          {
 113   1        u16_t hsum, sum;
 114   1      
 115   1        
 116   1        /* Compute the checksum of the TCP header. */
C51 COMPILER V9.01   UIP_ARCH                                                              08/23/2013 20:12:41 PAGE 3   

 117   1        hsum = uip_chksum((u16_t *)&uip_buf[20 + UIP_LLH_LEN], 20);
 118   1      
 119   1        /* Compute the checksum of the data in the TCP packet and add it to
 120   1           the TCP header checksum. */
 121   1        sum = uip_chksum((u16_t *)uip_appdata,
 122   1                         (u16_t)(((((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - 40)));
 123   1      
 124   1        if((sum += hsum) < hsum) {
 125   2          ++sum;
 126   2        }
 127   1        
 128   1        if((sum += BUF->srcipaddr[0]) < BUF->srcipaddr[0]) {
 129   2          ++sum;
 130   2        }
 131   1        if((sum += BUF->srcipaddr[1]) < BUF->srcipaddr[1]) {
 132   2          ++sum;
 133   2        }
 134   1        if((sum += BUF->destipaddr[0]) < BUF->destipaddr[0]) {
 135   2          ++sum;
 136   2        }
 137   1        if((sum += BUF->destipaddr[1]) < BUF->destipaddr[1]) {
 138   2          ++sum;
 139   2        }
 140   1        if((sum += (u16_t)htons((u16_t)IP_PROTO_TCP)) < (u16_t)htons((u16_t)IP_PROTO_TCP)) {
 141   2          ++sum;
 142   2        }
 143   1      
 144   1        hsum = (u16_t)htons((((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - 20);
 145   1        
 146   1        if((sum += hsum) < hsum) {
 147   2          ++sum;
 148   2        }
 149   1        
 150   1        return sum;
 151   1      }
 152          /*-----------------------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    573    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
